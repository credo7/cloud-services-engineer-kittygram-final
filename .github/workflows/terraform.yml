name: Terraform

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select the Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VAR_yc_token: ${{ secrets.YC_TOKEN }}
  TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
  TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v3

      - name: 🔐 Restore SSH public key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PUB_KEY_B64 }}" | base64 -d > ~/.ssh/id_ed25519.pub

      - name: 🛠 Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: 📝 Create ~/.terraformrc to configure provider installation
        run: |
          echo 'provider_installation {' > ~/.terraformrc
          echo '  network_mirror {' >> ~/.terraformrc
          echo '    url     = "https://terraform-mirror.yandexcloud.net/"' >> ~/.terraformrc
          echo '    include = ["registry.terraform.io/*/*"]' >> ~/.terraformrc
          echo '  }' >> ~/.terraformrc
          echo '  direct {' >> ~/.terraformrc
          echo '    exclude = ["registry.terraform.io/*/*"]' >> ~/.terraformrc
          echo '  }' >> ~/.terraformrc
          echo '}' >> ~/.terraformrc

      - name: 🔧 Terraform Init
        run: terraform init -backend-config="access_key=$ACCESS_KEY" -backend-config="secret_key=$SECRET_KEY"
        env:
          ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}

      - name: 🔍 Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run: terraform plan --var-file='.tfvars'

      - name: 🚀 Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve --var-file='.tfvars'

      - name: 💣 Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve --var-file='.tfvars'
