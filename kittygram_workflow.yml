name: CI/CD for Kittygram

on:
  push:
    branches:
      - main

jobs:
  tests:
    name: "PEP-8"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          pip install flake8 pytest
          pip install -r backend/requirements.txt

      - name: Lint backend
        run: flake8 backend --max-line-length=120 --exclude migrations,settings.py

  build-and-push-images:
    name: Push Docker images to DockerHub
    needs: tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build backend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest backend
          docker push ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest

      - name: Build frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest

      - name: Build and push gateway image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest nginx
          docker push ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest


  deploy:
    needs: build-and-push-images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy application
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e  # Stop on any error

            echo "üíª Navigating to the deployment directory"
            cd ./kittygram

            echo "‚¨áÔ∏è Pulling the latest Docker images"
            sudo docker-compose -f docker-compose.production.yml pull

            echo "üõë Stopping any running containers"
            sudo docker-compose -f docker-compose.production.yml down

            echo "üöÄ Starting the new containers"
            sudo docker-compose -f docker-compose.production.yml up -d

            echo "üì¶ Collecting static files"
            sudo docker-compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput

            echo "üîÑ Running database migrations"
            sudo docker-compose -f docker-compose.production.yml exec -T backend python manage.py migrate

            echo "‚úÖ Deployment completed successfully!"

  auto_tests:
    name: Run Auto Tests
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install pytest pyyaml requests

      - name: Run backend tests
        run: |
          pytest

  notify_in_telegram:
      name: Notify in Telegram
      runs-on: ubuntu-latest
      needs: auto_tests
      steps:
      - name: Send Telegram Notification
        uses: appleboy/telegram-action@v1.0.1
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ‚úÖ Kittygram Deployment Successful! üéâ
            üë§ Deployed by: ${{ github.actor }}
            üåê Access the app here: http://${{ secrets.SERVER_HOST }}
